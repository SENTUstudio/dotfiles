---
- name: Include global variables
  include_vars:
    file: "{{ playbook_dir }}/vars/global.yaml"
  tags: global_vars

- name: Include post-install variables
  include_vars:
    file: "{{ playbook_dir }}/vars/post_install.yaml"
  tags: post_install_vars

- name: Include flatpak_apps variables
  include_vars:
    file: "{{ playbook_dir }}/vars/flatpak.yaml"
  tags: flatpak_apps_vars

- name: Incluir variables específicas de la distribución
  ansible.builtin.include_vars:
    file: "{{ playbook_dir }}/vars/{{ ansible_os_family }}.yaml"
  ignore_errors: true # Evita fallos si el archivo no existe

- name: Depurar contenido de package_managers
  ansible.builtin.debug:
    var: package_managers

- name: Definir core_dependencies globalmente
  ansible.builtin.set_fact:
    core_dependencies: "{{ package_managers.dependencies.core | default([]) }}"

- name: Depurar contenido de core_dependencies
  ansible.builtin.debug:
    var: core_dependencies

- name: Definir extended_dependencies globalmente
  ansible.builtin.set_fact:
    extended_dependencies: "{{ package_managers.dependencies.extended | default([]) }}"

- name: Depurar contenido de extended_dependencies
  ansible.builtin.debug:
    var: extended_dependencies

- name: Definir flatpak_apps globalmente
  ansible.builtin.set_fact:
    flatpak_apps: "{{ apps | default([]) }}"

- name: Depurar contenido de flatpak_apps
  ansible.builtin.debug:
    var: flatpak_apps

- name: Obtener el directorio home del usuario
  ansible.builtin.command: echo $HOME
  register: user_home
  become: no

- name: Actualiza el sistema
  become: true # Generalmente se necesita elevación de privilegios para actualizar el sistema
  block:
    - name: Actualiza el sistema (Debian/Ubuntu)
      ansible.builtin.apt:
        update_cache: yes
        upgrade: safe
      when: ansible_os_family == "Debian"

    - name: Actualiza el sistema (RedHat based, excluyendo Fedora)
      ansible.builtin.yum:
        name: "*"
        state: latest
      when: ansible_os_family == "RedHat" and ansible_distribution != "Fedora"

    - name: Actualiza el sistema (Fedora)
      ansible.builtin.dnf:
        name: "*"
        state: latest
      when: ansible_distribution == "Fedora"

    - name: Actualiza el sistema (Arch Linux)
      ansible.builtin.pacman:
        update_cache: yes
        upgrade: yes
      when: ansible_os_family == "Archlinux"

    - name: Actualiza el sistema (openSUSE)
      community.general.zypper:
        name: "*"
        state: latest
      when: ansible_distribution == "openSUSE Leap" or ansible_distribution == "openSUSE Tumbleweed"

    - name: Actualiza el sistema (macOS con Homebrew)
      community.general.homebrew:
        update_homebrew: yes
        upgrade_all: yes
      when: ansible_os_family == "Darwin"

    # - name: Actualiza el sistema (Windows)
    #   community.windows.win_updates:
    #     category_names: "*"
    #     state: installed
    #   when: ansible_os_family == "Windows"
    #
  rescue:
    - name: Mostrar mensaje de error si no se pudo actualizar
      ansible.builtin.debug:
        msg: "No se pudo determinar cómo actualizar el sistema operativo: {{ ansible_distribution }}."
